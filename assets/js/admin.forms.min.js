/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/admin.forms.js":
/*!**********************************!*\
  !*** ./assets/js/admin.forms.js ***!
  \**********************************/
/***/ (function() {

eval("/* globals console, Mustache */\nlet _nails_forms = function() {\n    var base = this;\n\n    // --------------------------------------------------------------------------\n\n    base.__construct = function() {\n\n        //  @todo: move into CDN module\n        base.initMultiFiles();\n\n        base.initCharCounters();\n    };\n\n    // --------------------------------------------------------------------------\n\n    base.initMultiFiles = function() {\n\n        //  Add new rows to the picker\n        $(document)\n            .on('click', '.js-cdn-multi-action-add', function() {\n\n                base.log('MultiFile: Adding Row');\n\n                var _parent = $(this).closest('.field');\n                var _existing = _parent.data('items') || [];\n                var newItem = {\n                    'id': null,\n                    'object_id': null,\n                };\n                newItem[_parent.data('label-key')] = null;\n\n                _existing.push(newItem);\n                _parent.data('items', _existing);\n\n                base.renderMultFiles(_parent, _existing);\n\n                return false;\n            });\n\n        //  Remove a row from the picker\n        $(document)\n            .on('click', '.js-cdn-multi-action-remove', function() {\n\n                base.log('MultiFile: Removing Row');\n\n                var _removeIndex = $(this).data('index');\n                var _parent = $(this).closest('.field');\n                var _existing = _parent.data('items') || [];\n                var _newItems = [];\n\n                for (var i = 0; i < _existing.length; i++) {\n                    if (i !== _removeIndex) {\n                        _newItems.push(_existing[i]);\n                    }\n                }\n\n                base.renderMultFiles(_parent, _newItems);\n                _parent.data('items', _newItems);\n\n                return false;\n            });\n\n        //  Apply listeners to any existing multifile\n        $('.field.cdn-multi').each(function() {\n\n            var _defaults = $(this).data('defaults');\n            var _labelKey = $(this).data('label-key');\n            $(this)\n                .data('items', _defaults)\n                .data('label-key', _labelKey);\n\n            //  CDN Picker\n            $(this).find('.cdn-object-picker')\n                .on('picked', function() {\n                    base.multiCdnPicked($(this));\n                });\n\n            //  Label\n            $(this).find('.js-label')\n                .on('keyup', function() {\n                    base.multiLabelChanged($(this));\n                });\n        });\n    };\n\n    base.renderMultFiles = function(element, items) {\n\n        base.log('MultiFile: Rendering', items);\n\n        var _target = element.find('.js-row-target');\n        var _tpl = element.children('.js-row-tpl').html();\n        var _render = '';\n\n        _target.empty();\n\n        for (var i = 0; i < items.length; i++) {\n\n            //  Prepare the object\n            items[i].index = i;\n\n            //  Render the HTML\n            _render = Mustache.render(_tpl, items[i]);\n\n            //  Apply listeners\n            _render = $(_render);\n            _render.find('.cdn-object-picker')\n                .on('picked', function() {\n                    base.multiCdnPicked($(this));\n                });\n            _render.find('.js-label')\n                .on('keyup', function() {\n                    base.multiLabelChanged($(this));\n                });\n\n            //  Add to the target\n            _target.append(_render);\n        }\n\n        //  Init the CDN Pickers\n        window.NAILS.ADMIN.getInstance('ObjectPicker', 'nails/module-cdn').initPickers();\n    };\n\n    // --------------------------------------------------------------------------\n\n    base.multiCdnPicked = function(element) {\n\n        var _updateIndex = element.data('index');\n        var _parent = element.closest('.field');\n        var _existing = _parent.data('items') || [];\n\n        for (var i = 0; i < _existing.length; i++) {\n            if (i === _updateIndex) {\n                base.log('Updating object ID to ' + element.find('.cdn-object-picker__input').val());\n                base.log('At index: ' + _updateIndex);\n                _existing[i].object_id = parseInt(element.find('.cdn-object-picker__input').val(), 10) || null;\n                break;\n            }\n        }\n\n        _parent.data('items', _existing);\n    };\n\n    // --------------------------------------------------------------------------\n\n    base.multiLabelChanged = function(element) {\n\n        var _updateIndex = element.data('index');\n        var _parent = element.closest('.field');\n        var _existing = _parent.data('items') || [];\n\n        for (var i = 0; i < _existing.length; i++) {\n            if (i === _updateIndex) {\n                base.log('Updating label');\n                _existing[i][_parent.data('label-key')] = element.val();\n                break;\n            }\n        }\n\n        _parent.data('items', _existing);\n    };\n\n    // --------------------------------------------------------------------------\n\n    base.initCharCounters = function() {\n\n        $('.field .char-count:not(.counting)').each(function() {\n            var counter = $(this);\n            var maxLength = counter.data('max-length');\n            var field = $(this).closest('.field');\n            var input = $(this).closest('.input').find('.field-input');\n\n            if (input.length) {\n\n                input.on('keyup', function() {\n\n                    var length = $(this).val().length;\n\n                    if (length > maxLength) {\n                        field.addClass('max-length-exceeded');\n                    } else {\n                        field.removeClass('max-length-exceeded');\n                    }\n\n                    counter.html(length + ' of ' + maxLength + ' characters');\n                }).trigger('keyup');\n            }\n            counter.addClass('counting');\n        });\n    };\n\n    // --------------------------------------------------------------------------\n\n    /**\n     * Write a log to the console\n     * @param  {String} message The message to log\n     * @param  {mixed}  payload Any additional data to display in the console\n     * @return {void}\n     */\n    base.log = function(message, payload) {\n        if (typeof (console.log) === 'function') {\n            if (payload !== undefined) {\n                console.log('Nails Forms:', message, payload);\n            } else {\n                console.log('Nails Forms:', message);\n            }\n        }\n    };\n\n    // --------------------------------------------------------------------------\n\n    /**\n     * Write a warning to the console\n     * @param  {String} message The message to warn\n     * @param  {mixed}  payload Any additional data to display in the console\n     * @return {void}\n     */\n    base.warn = function(message, payload) {\n        if (typeof (console.warn) === 'function') {\n            if (payload !== undefined) {\n                console.warn('Nails Forms:', message, payload);\n            } else {\n                console.warn('Nails Forms:', message);\n            }\n        }\n    };\n\n    // --------------------------------------------------------------------------\n\n    return base.__construct();\n}();\n\n\n//# sourceURL=webpack://nails-module-admin/./assets/js/admin.forms.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/admin.forms.js"]();
/******/ 	
/******/ })()
;